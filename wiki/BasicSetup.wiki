#summary How to install ACRA 4.x in your Android application project.
#labels Phase-Deploy,Featured
<wiki:toc max_depth="3" />

= Introduction =

*All ACRA bug reports should be filed in the [http://code.google.com/p/acra/issues/list Issues Tracker]. You can also post your questions or suggestions to the [http://groups.google.com/group/acra-discuss Discussion Group]. * 

ACRA allows your Android application to send Crash Reports to various destinations:
  * a Google Docs spreadsheet (default and original behavior)
  * an email
  * your own server-side HTTP POST script
  * any other possible destination by implementing your own report sender

When a crash occurs, you can choose and configure 4 different ways of interacting with the user:
  * Silent (default): ACRA actions are not visible. The crash report is sent and then the default android crash system does its job (Force Close dialog)
  * Toast: When the crash occurs, ACRA displays a [http://developer.android.com/intl/fr/guide/topics/ui/notifiers/toasts.html toast] and simultaneously sends the report.
  * Notification: An optional toast is displayed on application crash, but the report is not sent immediately. A status bar notification is published warning the user that he should send a report. When selected, the notification displays a dialog asking for the authorization to send the report, with an optional user comment.
  * Dialog: *since 4.3.0b1*, experimental, allows to display a crash dialog without the need of a status bar notification. 

This tutorial will guide you through installing ACRA in your application project.

If you have any question or comment regarding ACRA, post a message on the [http://groups.google.com/group/acra-discuss Discussion Group].

= Setting-up your project =

Step by step installation of the ACRA library in an existing application project, with the simplest settings:
  * Get http://acra.googlecode.com/files/acra-4.2.3.zip (stable) or http://acra.googlecode.com/files/acra-4.3.0b2.zip (beta) and open the archive 
  * Login to your Google Docs account
  * Import the `CrashReports-template.csv` contained in the archive (acra-4.X.Y/CrashReport/doc), with conversion enabled
  * Open the imported document
  * Rename it as you like
  * In the Google Docs menu, click on Tools / Form / Create a form
  * Add anything in the form description just to enable the *Save* button
    * If you are using a private Google Apps domain, make sure to *uncheck* the option "Require yourdomain.com sign-in to view this form."
  * Save the form
  * Copy the `formkey` value displayed in the link at the bottom of the form creation page
http://acra.googlecode.com/svn/wiki/files/captures/formkey.png
  * Open your Eclipse project
  * Create a `libs` folder
  * Add the `acra-4.X.Y.jar` from the archive (acra-4.X.Y/build) in the `libs` folder
  * Right-click on the jar file / add to build path (should be done automatically if your Eclipse and ADT are up to date)
  * Create a new class in your package root _If your app already contains an Application subclass, add ACRA to this class._
    * Give it a name like: `MyApplication`, make it extend `android.app.Application`
    * Above the declaration of the `MyApplication` class, add the `@ReportsCrashes` annotation with your Google Docs `formKey` as a parameter 

{{{
    import org.acra.*;
    import org.acra.annotation.*;

    @ReportsCrashes(formKey = "dGVacG0ydVHnaNHjRjVTUTEtb3FPWGc6MQ") 
    public class MyApplication extends Application {
    }
}}}
    * In the `MyApplication` class, override the `onCreate()` method to add the ACRA init statement
{{{
    @Override
    public void onCreate() {
        // The following line triggers the initialization of ACRA
        ACRA.init(this);
        super.onCreate();
    }
}}}
  * Open the android manifest editor (`AndroidManifest.xml`)
    * In the *Application tab*, click on the *Browse* button next to the *Name* field
    * Select your newly created Application class (`MyApplication`).
    This adds an `android:name` attribute to your `application` element like this (put the full name with package if the application class package is not the same as manifest root element declared pakage):
{{{
<application android:icon="@drawable/icon" android:label="@string/app_name"
                android:name="MyApplication">
}}}
    * In the *Permissions* tab, add a *Uses Permission* object with value {{{android.permission.INTERNET}}}.
    This adds the following element as a child of the {{{manifest}}} element:
{{{
<uses-permission android:name="android.permission.INTERNET"></uses-permission>
}}}
  * *_THE END_* - next time your application crashes, it adds a line to your Google Docs spreadsheet :-).

*Bonus :* Google Docs spreadsheet allow to configure notifications on changes. Just set your preferences in  : Share (Top right button) / Set notification rules and get notified by mail when reports are sent !

Spreadsheet default cells alignment is bottom left... select all cells and choose top left alignment:
https://docs.google.com/uc?id=0B9J0DEDzWLEjMGU2YjBkMDItMzA5Zi00YzZiLWI0MDYtM2M5YmJlMjZhZWVk&export=download&hl=fr&align.png

= Is that all? =

First of all, you should read ReportContent for an explanation of the data collected by ACRA.

ACRA is designed to work with the simplest possible setup. But there are lots of configurable items, all described in the [AdvancedUsage Advanced Usage Guide]:
  * *[AdvancedUsage#User_Interaction User interaction mode]*: 
    * *SILENT (default)*: with the basic setup, ACRA sends reports silently, without warning your users, and lets the system display the native Force Close dialog (which may include Android Market Send Report button on android 2.1+ devices... if your app has been downloaded from the market).
    * *[AdvancedUsage#Toast_notification TOAST]*: displays a [http://developer.android.com/intl/fr/reference/android/widget/Toast.html Toast] with the text of your choice when the app crashes but doesn't allow your user to prevent reports from being sent (but you can setup a SharedPreference item).
    * *[AdvancedUsage#Status_bar_notification NOTIFICATION]*: displays a Toast when the app crashes, then a notification in the status bar asking your user to send a report. When the notification is selected, a Dialog asks for authorization + optional user comment.
    * _TODO_ *[AdvancedUsage#dialog DIALOG]*: displays a Toast when the app crashes, then displays a Dialog on application restart asking for authorization + optional user comment.
  * *[AdvancedUsage#Reports_destination Reports destination]*:
    * *GoogleDocs Form (default)*: the most used (and default) destination for crash reports with ACRA is a GoogleDocs Form. The data is stored in a GoogleDocs spreadsheet. This allows you to setup crash reporting without having to care about implementing a server-side script and find good quality (cheap) hosting. You use Google's infrastructure, for free.
    * *[AdvancedUsage#Sending_reports_to_your_own_self-hosted_script Custom server script]*: if you want to have better control over the reports, you can implement your own server-side script to handle reports and host it somewhere else. Then you can configure ACRA to send reports to this script.
    * *[AdvancedUsage#Sending_reports_by_email E-mail]*: if your application does not require internet permission and you don't want to add it only for crash reporting, you can configure ACRA to send reports by e-mail. This means that when a crash occurs, the user has to choose the e-mail app he prefers before reviewing the crash report and sending it.
    * *[AdvancedUsage#Implementing_your_own_sender Any destination you can imagine]*: there is a simple Interface you can implement to provide your own report sender to ACRA. ACRA gives your class the report data, you do whatever you want with it.
  * *[AdvancedUsage#Reports_Content Reports content]*: ACRA provides extensive device information and state data in default reports. In addition, you can:
    * [AdvancedUsage#Adding_your_own_variables_content_or_traces_in_crash_reports Add custom variable states or traces]
    * [AdvancedUsage#Adding_logcat,_eventlog_or_radiolog_extracts_to_reports Add logcat, eventlog or radiolog extracts]
    * [AdvancedUsage#Adding_DropBoxManager_events_to_your_reports Add DropBoxManager events]
    * [AdvancedUsage#Adding_the_Device_Unique_ID_to_your_reports Add Device unique ID]
    * [AdvancedUsage#Choosing_which_fields_to_be_included_in_reports Choosing which fields to be included in reports]
  * *[AdvancedUsage#Letting_your_users_control_ACRA User preferences]*: you can add to your app preferences screen some items to let users control ACRA's behavior and reports content:
    * [AdvancedUsage#Enable/disable_ACRA Enable/disable sending reports]
    * [AdvancedUsage#Enable/disable_system_logs  Enable/disable sending system logs]
    * [AdvancedUsage#Enable/disable_including_DeviceID  Enable/disable sending device unique id]
    * [AdvancedUsage#Set_an_email_address_to_be_added_to_reports Add an e-mail address to allow the developer to contact the user]
    * [AdvancedUsage#Enable/disable_auto_accept_reports Always accept sending reports] (for NOTIFICATION mode)
  * _TODO_ *[AdvancedUsage#DynamicConfiguration Dynamic Configuration]*     